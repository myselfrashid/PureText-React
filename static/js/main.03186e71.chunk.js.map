{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","Title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","Heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","copiedText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","console","log","length","split","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Fragment","About","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.03186e71.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props){\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.Title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"nazvbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"definition\" id=\"flexSwitchCheckDefault\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    Title: PropTypes.string,\r\n    About: PropTypes.string\r\n}","import React, {useState} from 'react';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to uppercase', 'success');\r\n    }\r\n    const handleLowClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to lowercase', 'success');\r\n    }\r\n    const handleClear = () =>{\r\n        let newText = ('');\r\n        setText(newText);\r\n        props.showAlert('Text Cleared', 'success');\r\n    }\r\n    const handleCopyText = () =>{\r\n        let copiedText = document.getElementById('myBox');\r\n        copiedText.select();\r\n        copiedText.setSelectionRange(0, 99999);\r\n        navigator.clipboard.writeText(copiedText.value);\r\n        console.log('handle copy was clicked')\r\n        props.showAlert('Copied to Clipboard', 'success');\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <div>\r\n            <h1 style = {{color: props.mode==='dark'?'white':'black'}}>{props.Heading}</h1>\r\n            <div className=\"mb-3 my-2\" >\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style = {{backgroundColor: props.mode==='dark'?'#2a2d30':'white', color: props.mode==='dark'?'white':'black'}}></textarea>\r\n            </div>\r\n            <div>\r\n            <button className=\"btn btn-primary my-1 mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary my-1 mx-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-secondary my-1 mx-1\" onClick={handleClear}>Clear</button>\r\n            <button className=\"btn btn-primary my-1 mx-1\" onClick={handleCopyText}>Copy to Clipboard</button>\r\n            </div>\r\n            <div className=\"container my-3\" style = {{color: props.mode==='dark'?'white':'black'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p>Text contains: {text.length} characters</p>\r\n                <p>Text contains: {text.split(' ').length -1} word(s)</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  } \n  const toggleMode = () => {\n    if (mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#2a2d30';\n      showAlert('Dark mode enabled', 'success');\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode enabled', 'success');\n    }\n    console.log('clicked')\n  }\n  return (\n    <>\n    <Navbar Title = 'PureText' About = 'About Us' mode = {mode} toggleMode = {toggleMode}/>\n    <Alert alert = {alert}/>\n    <div className=\"container\">\n    <TextForm Heading = 'Enter text below to analyse' mode = {mode} showAlert = {showAlert}/>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}